Object subclass: #Graph	instanceVariableNames: 'nodes edges'	classVariableNames: ''	package: 'MyGraph'!!Graph methodsFor: 'as yet unclassified' stamp: 'GageBenham 11/14/2023 23:59'!edgeById: anId    ^ edges at: anId ifAbsent: [nil].! !!Graph methodsFor: 'as yet unclassified' stamp: 'GageBenham 11/14/2023 23:59'!addEdge: anEdge    edges at: anEdge id put: anEdge.! !!Graph methodsFor: 'as yet unclassified' stamp: 'GageBenham 11/14/2023 23:59'!edges    ^ edges values! !!Graph methodsFor: 'as yet unclassified' stamp: 'GageBenham 11/14/2023 23:59'!nodes    ^ nodes values! !!Graph methodsFor: 'as yet unclassified' stamp: 'GageBenham 11/14/2023 23:59'!nodeById: anId    ^ nodes at: anId ifAbsent: [nil].! !!Graph methodsFor: 'initialization' stamp: 'GageBenham 11/14/2023 23:58'!addNode: aNode    nodes at: aNode id put: aNode.! !!Graph methodsFor: 'initialization' stamp: 'GageBenham 11/14/2023 23:58'!initialize    super initialize.    nodes := Dictionary new.    edges := Dictionary new.! !Object subclass: #GraphEdge	instanceVariableNames: 'id from to type'	classVariableNames: ''	package: 'MyGraph'!!GraphEdge methodsFor: 'accessing' stamp: 'GageBenham 11/15/2023 00:01'!to    ^ to! !!GraphEdge methodsFor: 'accessing' stamp: 'GageBenham 11/15/2023 00:01'!from    ^ from! !!GraphEdge methodsFor: 'accessing' stamp: 'GageBenham 11/20/2023 20:50'!type: aType	type:=aType! !!GraphEdge methodsFor: 'accessing' stamp: 'GageBenham 11/15/2023 00:01'!from: aNode    from := aNode.! !!GraphEdge methodsFor: 'accessing' stamp: 'GageBenham 11/20/2023 20:51'!type	^type! !!GraphEdge methodsFor: 'accessing' stamp: 'GageBenham 11/15/2023 00:01'!to: aNode    to := aNode.! !!GraphEdge methodsFor: 'accessing' stamp: 'GageBenham 11/15/2023 00:01'!id    ^ id! !!GraphEdge methodsFor: 'initialization' stamp: 'GageBenham 11/15/2023 00:00'!id: anId    id := anId.! !!GraphEdge methodsFor: 'initialization' stamp: 'GageBenham 11/20/2023 20:50'!initialize    super initialize.    type := ''! !Object subclass: #GraphNode	instanceVariableNames: 'id name age'	classVariableNames: ''	package: 'MyGraph'!!GraphNode methodsFor: 'initialization' stamp: 'GageBenham 11/15/2023 00:02'!id: anId    id := anId.! !!GraphNode methodsFor: 'initialization' stamp: 'GageBenham 11/20/2023 20:51'!initialize    super initialize.    age := 0.	 name := ''	! !!GraphNode methodsFor: 'accessing' stamp: 'GageBenham 11/20/2023 20:48'!age: anAge    age := anAge.! !!GraphNode methodsFor: 'accessing' stamp: 'GageBenham 11/20/2023 20:48'!name: aName    name := aName.! !!GraphNode methodsFor: 'accessing' stamp: 'GageBenham 11/20/2023 20:47'!age    ^ age! !!GraphNode methodsFor: 'accessing' stamp: 'GageBenham 11/20/2023 20:47'!name    ^ name! !!GraphNode methodsFor: 'accessing' stamp: 'GageBenham 11/15/2023 00:03'!id    ^ id! !TestCase subclass: #MyGraphTest	instanceVariableNames: ''	classVariableNames: ''	package: 'MyGraph'!!MyGraphTest methodsFor: 'as yet unclassified' stamp: 'GageBenham 12/4/2023 04:57'!testAddNode	|newGraph newNode checkNode|	newGraph := Graph new.	newNode := GraphNode new.	newNode		id: 10;		name: 'Gage Benham';		age: 24.	newGraph addNode: newNode.	self assert: newGraph nodes size equals: 1.		checkNode := newGraph nodeById: 10.	self assert: checkNode name equals: 'Gage Benham'		! !!MyGraphTest methodsFor: 'tests' stamp: 'GageBenham 12/4/2023 05:23'!testAddEdges	|newGraph node1 node2 edge1 edge2|	newGraph := Graph new.		node1 := GraphNode new.	node2 :=GraphNode new.		edge1 :=GraphEdge new.	edge2 :=GraphEdge new.		node1		id: 1;		name: 'Gage Benham';		age: 24.	node2 		id: 2;		name: 'Zoe Benham';		age: 20.			newGraph addNode: node1.	newGraph addNode: node2.		edge1 		id: 1;		from: node1;		to: node2;		type: 'brother'.	edge2 		id: 2;		from: node2;		to: node1;		type: 'sister'.		newGraph addEdge: edge1.	newGraph addEdge: edge2.	self assert: newGraph edges size equals: 2.	! !