Object subclass: #Visualizer	instanceVariableNames: 'graph file visualization json'	classVariableNames: ''	package: 'MyVisualizer'!!Visualizer methodsFor: 'initialization' stamp: 'GageBenham 12/4/2023 03:57'!initialize	super initialize.	graph := Graph.	file := String.	visualization := RTMondrian	! !!Visualizer methodsFor: 'initialization' stamp: 'GageBenham 12/4/2023 04:03'!parseJSON: jsonPath	file := jsonPath asFileReference readStreamDo: [ :stream | 		        stream upToEnd ].	json := NeoJSONReader fromString: file.	graph := Graph new.	((json at: 'Graph' ifAbsent: [ ^ self ]) at: 'nodes') 		keysAndValuesDo: [ :key :nodeData | 			graph addNode: (GraphNode new					 id: key;					 name:(nodeData at: 'name');					 age:(nodeData at: 'age');					 yourself) ].	((json at: 'Graph' ifAbsent: [ ^ self ]) at: 'edges') 		keysAndValuesDo: [ :key :edgeData | 			| fromNode toNode |			fromNode := graph nodeById: (edgeData at: 'from').			toNode := graph nodeById: (edgeData at: 'to').			(fromNode notNil and: [ toNode notNil ]) ifTrue: [ 				graph addEdge: (GraphEdge new						 id: key;						 from: fromNode;						 to: toNode;						 type: (edgeData at: 'type');						 yourself) ] ].! !!Visualizer methodsFor: 'initialization' stamp: 'GageBenham 12/4/2023 05:14'!visualizeJSON	visualization := RTMondrian new.	visualization shape circle	size: [ :node | (node age asInteger) ].		visualization nodes: graph nodes	forEach: [ :node |		node class allInstVarNames do:  [ :varName | 			visualization node: (node instVarNamed: varName)  ] ].	visualization edges useAssociations:		(graph edges collect: [ :each | each from -> each to ]).	visualization layout force.	visualization layout force charge: -1000.	visualization open! !