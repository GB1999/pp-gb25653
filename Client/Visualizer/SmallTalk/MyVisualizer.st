Object subclass: #Visualizer	instanceVariableNames: 'jsonPath graph file visualization json'	classVariableNames: ''	package: 'MyVisualizer'!!Visualizer methodsFor: 'initialization' stamp: 'GageBenham 11/17/2023 22:57'!parseJSON	file := jsonPath asFileReference readStreamDo: [ :stream | 		        stream upToEnd ].	json := NeoJSONReader fromString: file.	graph := Graph new.	((json at: 'Graph' ifAbsent: [ ^ self ]) at: 'nodes') 		keysAndValuesDo: [ :key :nodeData | 			graph addNode: (GraphNode new					 id: key;					 value: (nodeData at: 'value');					 yourself) ].	((json at: 'Graph' ifAbsent: [ ^ self ]) at: 'edges') 		keysAndValuesDo: [ :key :edgeData | 			| fromNode toNode |			fromNode := graph nodeById: (edgeData at: 'from').			toNode := graph nodeById: (edgeData at: 'to').			(fromNode notNil and: [ toNode notNil ]) ifTrue: [ 				graph addEdge: (GraphEdge new						 id: key;						 from: fromNode;						 to: toNode;						 length: ((edgeData at: 'data') at: 'length');						 yourself) ] ].! !!Visualizer methodsFor: 'initialization' stamp: 'GageBenham 11/17/2023 22:51'!visualizeJSON	| json graph visualization file |	file := jsonPath asFileReference readStreamDo: [ :stream | 		        stream upToEnd ].	json := NeoJSONReader fromString: file.	graph := Graph new.	((json at: 'Graph' ifAbsent: [ ^ self ]) at: 'nodes') 		keysAndValuesDo: [ :key :nodeData | 			graph addNode: (GraphNode new					 id: key;					 value: (nodeData at: 'value');					 yourself) ].	((json at: 'Graph' ifAbsent: [ ^ self ]) at: 'edges') 		keysAndValuesDo: [ :key :edgeData | 			| fromNode toNode |			fromNode := graph nodeById: (edgeData at: 'from').			toNode := graph nodeById: (edgeData at: 'to').			(fromNode notNil and: [ toNode notNil ]) ifTrue: [ 				graph addEdge: (GraphEdge new						 id: key;						 from: fromNode;						 to: toNode;						 length: ((edgeData at: 'data') at: 'length');						 yourself) ] ].	visualization := RTMondrian new.	visualization shape circle size: [ :id | 		(graph nodeById: id) value log * 30 ].	visualization nodes: (graph nodes collect: [ :each | each id ]).	visualization edges useAssociations:		(graph edges collect: [ :each | each from id -> each to id ]).	visualization layout force.	visualization open! !!Visualizer methodsFor: 'initialization' stamp: 'GageBenham 11/17/2023 22:57'!initialize: path	super initialize.	jsonPath := path.	graph := Graph.	file := String.	visualization := RTMondrian	! !